local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create GUI
local GUI = Instance.new("ScreenGui")
GUI.Name = "UnderMadeMenu"
GUI.ResetOnSpawn = false
GUI.IgnoreGuiInset = true
GUI.Parent = player:WaitForChild("PlayerGui")

-- Frame
local Frame = Instance.new("Frame")
Frame.Parent = GUI
Frame.Position = UDim2.new(0.3, 0, 0.3, 0)
Frame.Size = UDim2.new(0.4, 0, 0.5, 0)
Frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Frame.BorderSizePixel = 3
Frame.Active = true
Frame.Draggable = true

-- UI Styling
Instance.new("UICorner", Frame)
local stroke = Instance.new("UIStroke", Frame)
stroke.Thickness = 3

-- Title
local Title = Instance.new("TextLabel")
Title.Parent = Frame
Title.Size = UDim2.new(1, 0, 0.15, 0)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
Title.Text = "UnderMade Menu"
Title.TextScaled = true
Title.TextColor3 = BrickColor.new("Ghost grey").Color
Instance.new("UICorner", Title)
local titleStroke = Instance.new("UIStroke", Title)
titleStroke.Thickness = 3
titleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

-- Button Creator
local function createButton(name, pos, text, callback)
	local btn = Instance.new("TextButton")
	btn.Name = name
	btn.Parent = Frame
	btn.Position = pos
	btn.Size = UDim2.new(0.45, 0, 0.2, 0)
	btn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	btn.TextColor3 = Color3.fromRGB(255, 255, 255)
	btn.TextScaled = true
	btn.Text = text
	btn.AutoButtonColor = true
	Instance.new("UICorner", btn)
	local btnStroke = Instance.new("UIStroke", btn)
	btnStroke.Thickness = 3
	btnStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	btn.MouseButton1Click:Connect(callback)
	return btn
end

-- WalkSpeed Button
createButton("SpeedButton", UDim2.new(0.05, 0, 0.2, 0), "Walkspeed = 100", function()
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.WalkSpeed = 100
	end
end)

-- Jump Power Button
createButton("JumpButton", UDim2.new(0.5, 0, 0.2, 0), "Super Jump", function()
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.JumpHeight = 40
	end
end)

-- Godmode Button
createButton("GodButton", UDim2.new(0.05, 0, 0.45, 0), "GodMode", function()
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		humanoid.MaxHealth = math.huge
		humanoid.Health = math.huge
	end
end)

-- Noclip Button
createButton("NoclipButton", UDim2.new(0.5, 0, 0.45, 0), "Noclip", function()
	local RunService = game:GetService("RunService")
	local character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")
	local modifiedParts = {}

	RunService.RenderStepped:Connect(function()
		if not character or not hrp then return end

		-- Raycast down to find floor
		local rayParams = RaycastParams.new()
		rayParams.FilterDescendantsInstances = {character}
		rayParams.FilterType = Enum.RaycastFilterType.Blacklist
		local ray = workspace:Raycast(hrp.Position, Vector3.new(0, -5, 0), rayParams)
		local floor = ray and ray.Instance or nil

		for part, original in pairs(modifiedParts) do
			if part and part:IsA("BasePart") then
				part.CanCollide = original
			end
		end
		modifiedParts = {}

		for _, part in pairs(workspace:GetPartBoundsInBox(hrp.CFrame, hrp.Size + Vector3.new(2,2,2))) do
			if part:IsA("BasePart") and part.CanCollide and not part:IsDescendantOf(character) and part ~= floor then
				modifiedParts[part] = part.CanCollide
				part.CanCollide = false
			end
		end
	end)
end)
